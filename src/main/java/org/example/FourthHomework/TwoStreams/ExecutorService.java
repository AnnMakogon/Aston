package org.example.FourthHomework.TwoStreams;

import lombok.extern.slf4j.Slf4j;
import org.example.Executor;
import org.springframework.stereotype.Service;

@Slf4j
@Service("firthExecutorServiceTwoStreams")
public class ExecutorService implements Executor {

    @Override
    public void execution() {
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ IT –∫–æ–º–ø–∞–Ω–∏–∏\n");

        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—ã
        DepartmentCollaboration.DevelopmentDepartment backendDev = new DepartmentCollaboration.DevelopmentDepartment("Backend Department");
        DepartmentCollaboration.QADepartment qaTeam = new DepartmentCollaboration.QADepartment("QA Department");

        // –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        Thread devThread = new Thread(backendDev, "Backend-Dev");
        Thread qaThread = new Thread(qaTeam, "QA-Team");

        devThread.setDaemon(true);
        qaThread.setDaemon(true);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—ã
        devThread.start();
        qaThread.start();

        // –†–∞–±–æ—Ç–∞–µ–º 10 —Å–µ–∫—É–Ω–¥
        try {
            Thread.sleep(10000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        System.out.println("\nüè¢ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ª–∞–∂–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!");
    }
}

